import java.util.Random;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.FileWriter;
class snakeandladder implements Runnable { // snakeandladder thread
    Thread t;
    snakeandladder()
    {
        t=new Thread(this,"snake and ladder thread");
        System.out.println("Snake and Ladder game created");
    }



    public class Snake {
        private int start_index;
        private int end_index;
        public int[] snake_head_array = {96, 94, 52, 25, 95, 31};
        public int[] snake_tail_array = {54, 21, 37, 16, 8, 27};

        public Snake(int x, int y) {
            this.start_index = x;
            this.end_index = y;
        }

        public Snake() {
            System.out.println("Snakes have been created");
        }

        public int checkifsnake(int x, String xy) {
            for (int i = 0; i < 6; i++) {
                if (x == snake_head_array[i]) {
                    x = snake_tail_array[i];
                    System.out.println(xy + " HAS FALLEN DOWN TO " + x);
                    break;

                }
            }
            return x;
        }


    }

    public class Ladder {
        private int start_ladder_index;
        private int end_ladder_index;
        public int[] ladder_head_array = {93, 85, 69, 46, 29, 13};
        public int[] ladder_tail_array = {34, 78, 44, 2, 11, 7};

        public Ladder(int x, int y) {
            this.start_ladder_index = x;
            this.end_ladder_index = y;
        }

        public Ladder() {
            System.out.println("Ladders have been created");
        }

        public int checkifladder(int y, String yx) {
            for (int i = 0; i < 6; i++) {
                if (y == ladder_tail_array[i]) {
                    y = ladder_head_array[i];
                    System.out.println(yx + " HAS CLIMED UP TO " + y);
                    break;
                }
            }
            return y;
        }

    }

    public class Player {
        public int current_index;
        private String id;

        public Player(String player_id) {
            this.current_index = 1;
            this.id = player_id;
        }

        public String getid(Player x) {
            return x.id;
        }


    }


    public class Game {
        public Player player_1;
        public Player player_2;
        public int current_player_with_die = 1;

        public Game(Player x, Player y) {
            player_1 = x;
            player_2 = y;
            int game_grid[][] = new int[100][100];
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    game_grid[i][j] = 10 * i + (j + 1);
                }
            }


        }

        public boolean isOver() {
            if (player_1.current_index >= 100 || player_2.current_index >= 100) {
                return true;
            }
            return false;


        }

        public int get_curr_playerwithdie() {
            return current_player_with_die;
        }

        public String player_won() {
            String temp_name = null;
            if (player_1.current_index == 100) {
                temp_name = player_1.getid(player_1);
            } else if (player_2.current_index == 100) {
                temp_name = player_2.getid(player_2);
            }
            return temp_name;

        }
    }

    public void run() { //run method of snakeandladder
        try {
            Scanner sc = new Scanner(System.in);
            Random rand = new Random();
            Snake s = new Snake();
            Ladder l = new Ladder();
            Player player_with_dice;
            System.out.println("Enter player_1's name:");
            Player player1 = new Player(sc.next());
            System.out.println("Enter player_2's name:");
            Player player2 = new Player(sc.next());
            Game snake_ladder = new Game(player1, player2);
            while (!snake_ladder.isOver()) {
                if (snake_ladder.get_curr_playerwithdie() == 1) {
                    player_with_dice = player1;
                    System.out.println("player 1's turn: ");
                    int turn_value_1 = rand.nextInt(6) + 1;
                    System.out.println("Enter any number to roll");
                    sc.nextInt();
                    System.out.println("Dice display: " + turn_value_1);
                    player1.current_index += turn_value_1;
                    if(player1.current_index>100)
                    {
                        player1.current_index-=turn_value_1;
                        snake_ladder.current_player_with_die = 0;
                        continue;
                    }
                    System.out.println("player1's current position is: " + player1.current_index);
                    if (turn_value_1 == 6) {
                        System.out.println("Enter 1 to roll");
                        sc.nextInt();
                        turn_value_1 = rand.nextInt(6) + 1;
                        player1.current_index += turn_value_1;
                        if(player1.current_index>100)
                        {
                            player1.current_index-=turn_value_1;
                            snake_ladder.current_player_with_die = 0;
                            continue;
                        }
                        System.out.println("player1's current position is: " + player1.current_index);
                    }
                    player1.current_index = s.checkifsnake(player1.current_index, player1.getid(player1));
                    player1.current_index = l.checkifladder(player1.current_index, player1.getid(player1));
                    snake_ladder.current_player_with_die = 0;
                } else if (snake_ladder.get_curr_playerwithdie() == 0) {
                    player_with_dice = player2;
                    System.out.println("player 2's turn: ");
                    int turn_value_2 = rand.nextInt(6) + 1;
                    System.out.println("Enter 1 to roll");
                    sc.nextInt();
                    System.out.println("Dice display: " + turn_value_2);
                    player2.current_index += turn_value_2;
                    if(player2.current_index>100)
                    {
                        player2.current_index-=turn_value_2;
                        snake_ladder.current_player_with_die = 1;
                        continue;
                    }
                    System.out.println("player2's current position is: " + player2.current_index);
                    if (turn_value_2 == 6) {
                        System.out.println("Enter 1 to roll");
                        sc.nextInt();
                        turn_value_2 = rand.nextInt(6) + 1;
                        player2.current_index += turn_value_2;
                        if(player2.current_index>100)
                        {
                            player2.current_index-=turn_value_2;
                            snake_ladder.current_player_with_die = 1;
                            continue;
                        }
                        System.out.println("player2's current position is: " + player2.current_index);
                    }
                    player2.current_index = s.checkifsnake(player2.current_index, player2.getid(player2));
                    player2.current_index = l.checkifladder(player2.current_index, player2.getid(player2));
                    snake_ladder.current_player_with_die = 1;
                }


            }

            System.out.println(snake_ladder.player_won() + " HAS WON THE GAME");
            try{
                FileWriter fws=new FileWriter("C:\\Users\\Admin\\Desktop\\project_3.txt",true); //result of snake and ladder game written to a file
                fws.write(snake_ladder.player_won()+ " HAS WON SNAKE AND LADDER GAME");
                fws.close();
            }catch(Exception e)
            {
                System.out.println("Exception caught");
            }
            Thread.sleep(500);
        }
        catch(Exception e)
        {
            System.out.println("Exception caught: "+e);
        }
    }





}


public class unocards implements Runnable {
    Thread t;
    unocards()
    {
        t=new Thread(this,"uno cards thread");
        System.out.println("Uno cards game has been created");
    }


    public class Card {

        private String facename;
        private String suit;

        public Card(String facename, String suit) {
            setFaceName(facename);
            setSuit(suit);
        }

        public String getFaceName(Card card) {

            return card.facename;
        }

        public String getSuit(Card card) {
            return card.suit;
        }

        public String getFacename(String facename) {
            return facename;
        }

        public String getSuit(String suit) {
            return suit;
        }

        public void setFaceName(String facename) {
            this.facename = facename;
        }

        public void setSuit(String suit) {
            this.suit = suit;
        }

        public String printstring() {
            return facename + " of " + suit;
        }


    }

    public class Deck {
        private Card[] deck;
        int current_card;
        public int cardno;
        private int top;

        public Deck() {
            String[] faces = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Reverse", "Skip", "draw 2", "draw 4"};
            String[] colors = {"Red", "Yellow", "Green", "Blue"};
            cardno = 0;
            deck = new Card[56];

            for (int color = 0; color < 4; color++) {
                for (int face_no = 0; face_no < 14; face_no++) {
                    deck[cardno] = new Card(faces[face_no], colors[color]);
                    cardno += 1;


                }
            }

            top = cardno - 1;


        }


        public void display() {
            for (Card card : deck) {
                System.out.println(card.printstring());

            }
        }

        public void shuffle(int no_cards) {
            int no = no_cards;
            Random random = new Random();
            for (int i = 0; i < no_cards; i++) {
                int random_index = i + random.nextInt(no - i);
                Card temp = deck[random_index];
                deck[random_index] = deck[i];
                deck[i] = temp;
            }


        }

        public Card drawCard() {
            if (top == 0) {
                System.out.println("No more cards left");
                System.exit(0);
            }
            cardno = cardno - 1;
            return deck[--top];
        }


        public boolean isEmpty() {
            return deck.length == 0;
        }

        public void replace_deck_with(ArrayList<Card> cards_replacement) {
            deck = cards_replacement.toArray(new Card[cards_replacement.size()]);
            cardno = cards_replacement.size();
        }
    }
    public class Game{
        public int current_player;
        private String[] player_indices;
        private Deck deck;
        private ArrayList<ArrayList<Card>> player_hand;
        public ArrayList<Card> Buffer;
        private int players_playing;
        boolean rotation;
        String curr_facename;
        String curr_suit;
        public Game(String[] player_string,int no_players)
        {
            deck=new Deck();
            deck.shuffle(deck.cardno);
            Buffer=new ArrayList<Card>();
            current_player=0;
            rotation=false;
            players_playing=no_players;
            player_indices=player_string;
            player_hand=new ArrayList<ArrayList<Card>> ();
            for(int i=0;i<players_playing;i++)
            {
                ArrayList<Card> current_playerhand=new ArrayList<Card>();
                for(int j=0;j<7;j++)
                {
                    current_playerhand.add(deck.drawCard());
                }
                player_hand.add(current_playerhand);

            }


        }
        public void start_game(Game game)
        {
            deck.shuffle(deck.cardno);
            Card card_drawn=deck.drawCard();
            Buffer.add(card_drawn);
            System.out.println("The first card drawn is:");
            System.out.println(Buffer.get(Buffer.size()-1).printstring());
            System.out.println(card_drawn.printstring());
            curr_facename = card_drawn.getFaceName(card_drawn);
            curr_suit = card_drawn.getSuit(card_drawn);
            if(card_drawn.getFaceName(card_drawn)=="draw 2")
            {
                start_game(game);

            }
            else if(card_drawn.getFaceName(card_drawn)=="draw 4")
            {
                start_game(game);
            }
            else if(card_drawn.getFaceName(card_drawn)=="reverse")
            {
                System.out.println("The rotation of the game has been reversed");
                rotation^=true;
                current_player=player_indices.length-1;

            }
            else if(card_drawn.getFaceName(card_drawn)=="skip")
            {
                System.out.println("The current player's turn has been fixed");
                if(rotation==true)
                {
                    current_player=(current_player+1)%(player_indices.length);
                    if(current_player==player_indices.length)
                    {
                        current_player=0;
                    }
                }
                else
                {
                    current_player=(current_player-1)%(player_indices.length);
                    if(current_player==-1)
                    {
                        current_player=(player_indices.length)-1;
                    }
                }

            }

        }
        public boolean game_over()
        {
            for(String player: player_indices)
            {
                if(emptyhand(player))
                {
                    return true;
                }
            }
            return false;
        }
        public boolean emptyhand(String x)
        {
            ArrayList<Card> temp_hand=get_playerhand(x);
            if(temp_hand.size()==0)
            {
                return true;
            }
            return false;
        }
        public ArrayList<Card> get_playerhand(String y)
        {
            int indice = 0;
            for(int i=0;i<players_playing;i++)
            {
                if(player_indices[i]==y)
                {
                    indice=i;
                }
            }
            return player_hand.get(indice);
        }
        public int get_playerhand_size(String z)
        {
            return get_playerhand(z).size();
        }
        public String get_currentplayer()
        {
            return player_indices[current_player];
        }
        public String get_previousplayer()
        {
            int prev_idx=current_player-1;
            if(prev_idx==-1)
            {
                prev_idx=player_indices.length-1;

            }
            return player_indices[prev_idx];
        }
        public Card get_playercard(String player_id,int choice)
        {
            ArrayList<Card> temp= get_playerhand(player_id);
            return temp.get(choice);
        }
        public boolean is_valid_move(Card card)
        {
            Card temp_card1;
            temp_card1=Buffer.get(Buffer.size()-1);
            curr_suit= temp_card1.getSuit(temp_card1);
            curr_facename= temp_card1.getFaceName(temp_card1);
            return card.getFaceName(card)==curr_facename || card.getSuit(card)==curr_suit;

        }
        public boolean is_player_turn(String curr_player_id)
        {
            return player_indices[current_player]==curr_player_id;
        }

        public void final_draw(String id_player)
        {

            if (deck.isEmpty()) {
                deck.replace_deck_with(Buffer);
                deck.shuffle(deck.cardno);
                Buffer.add(deck.drawCard());
            }




            get_playerhand(id_player).add(deck.drawCard());
            if(rotation==false)
            {
                current_player=(current_player+1) % (player_indices.length);
                if(current_player==players_playing)
                {
                    current_player=0;
                }
            }
            else
            {
                current_player=(current_player-1) % (player_indices.length);
                if(current_player==-1)
                {
                    current_player=(player_indices.length)-1;
                }
            }



        }
        public void played_card(String identity,Card card,String suit_card)
        {
            ArrayList<Card> curr_identity_hand=get_playerhand(identity);
            if(is_player_turn(identity))
            {
                curr_identity_hand.remove(card);
                if(emptyhand(identity))
                {
                    try{
                        FileWriter fwu=new FileWriter("C:\\Users\\Admin\\Desktop\\project_3.txt",true);
                        fwu.write(identity + " HAS WON UNO CARDS GAME");
                        fwu.close();
                    }catch(Exception e)
                    {
                        System.out.println("Exception caught");
                    }
                    System.out.println(identity + " HAS WON");

                }
                curr_facename=card.getFaceName(card);
                curr_suit=card.getSuit(card);
                Buffer.add(card);
                System.out.println("The card on the top of the buffer is:");
                System.out.println(card.printstring());

            }
            if(rotation==false)
            {
                current_player=(current_player+1) % (player_indices.length);
                if(current_player==players_playing)
                {
                    current_player=0;
                }
            }
            else
            {
                current_player=(current_player-1) % (player_indices.length);
                if(current_player==-1)
                {
                    current_player=(player_indices.length)-1;
                }
            }
            if(card.getFaceName(card)=="draw 2")
            {
                identity=player_indices[current_player];
                curr_identity_hand=get_playerhand(identity);
                curr_identity_hand.add(deck.drawCard());
                curr_identity_hand.add(deck.drawCard());
                System.out.println(identity +" just drew 2 cards ");
            }
            if(card.getFaceName(card)=="draw 4")
            {
                identity=player_indices[current_player];
                curr_identity_hand=get_playerhand(identity);
                curr_identity_hand.add(deck.drawCard());
                curr_identity_hand.add(deck.drawCard());
                curr_identity_hand.add(deck.drawCard());
                curr_identity_hand.add(deck.drawCard());
                System.out.println(identity +" just drew 4 cards ");

            }
            if(card.getFaceName(card)=="Skip")
            {
                identity=player_indices[current_player];
                System.out.println(identity+" was skipped ");
                if(rotation==false)
                {
                    current_player=(current_player+1) % (player_indices.length);
                    if(current_player==players_playing)
                    {
                        current_player=0;
                    }
                }
                else
                {
                    current_player=(current_player-1) % (player_indices.length);
                    if(current_player==-1)
                    {
                        current_player=(player_indices.length)-1;
                    }
                }
            }
            if(card.getFaceName(card)=="Reverse")
            {
                System.out.println("The game rotation has been reversed");
                if(rotation==true)
                {
                    rotation=false;
                }
                else
                {
                    rotation=true;
                }
                if(rotation==false)
                {
                    current_player=(current_player+1) % (player_indices.length);
                    if(current_player==players_playing)
                    {
                        current_player=0;
                    }
                }
                else
                {
                    current_player=(current_player-1) % (player_indices.length);
                    if(current_player==-1)
                    {
                        current_player=(player_indices.length)-1;
                    }
                }

            }
        /*if(rotation==false && current_player==players_playing-1)
        {
            current_player=0;
        }
        else if(rotation==true && current_player==0)
        {
            current_player=players_playing-1;
        }*/



        }

    }
    public void run() {
        try {
            Scanner sc = new Scanner(System.in);
            Deck thedeck = new Deck();
            thedeck.shuffle(56);
            int no_players;
            System.out.println("Enter the number of players");
            no_players = sc.nextInt();
            String[] player_names = new String[no_players + 14];
            for (int i = 0; i < no_players; i++) {
                int temp_i = i + 1;
                System.out.println("Enter player " + temp_i + "'s name");
                player_names[i] = sc.next();
            }
            Game uno_game = new Game(player_names, no_players);
            uno_game.start_game(uno_game);
            String current_turn = null;
            ArrayList<Card> temp_player_id_hand;
            while (!uno_game.game_over()) {
                System.out.println(uno_game.current_player);
                String player_id = uno_game.get_currentplayer();
                temp_player_id_hand = uno_game.get_playerhand(player_id);
                System.out.println("Player " + player_id + " your hand is :");
                for (int i = 1; i <= temp_player_id_hand.size(); i++) {
                    System.out.println(i + ". " + temp_player_id_hand.get(i - 1).printstring());
                }
                System.out.println("Enter 0 if you'd like to draw a card and 1 for continuing");
                if (sc.nextInt() == 0) {
                    uno_game.final_draw(player_id);
                    System.out.println("The card on the top of the buffer is:");
                    System.out.println(uno_game.Buffer.get(uno_game.Buffer.size() - 1).printstring());

                    continue;
                } else {
                    int flag = 0;
                    while (flag == 0) {
                        System.out.println("Enter the index of the card you'd like to play");
                        int temp1 = sc.nextInt();
                        Card temp_playercard = temp_player_id_hand.get(temp1 - 1);
                        String str_suit = temp_playercard.getSuit(temp_playercard);
                        String str_facename = temp_playercard.getFaceName(temp_playercard);
                        if (uno_game.Buffer.get(uno_game.Buffer.size() - 1).getSuit(uno_game.Buffer.get(uno_game.Buffer.size() - 1)) != str_suit && uno_game.Buffer.get(uno_game.Buffer.size() - 1).getFaceName(uno_game.Buffer.get(uno_game.Buffer.size() - 1)) != str_facename) {
                            System.out.println("The card played isn't valid. Select again");
                            System.out.println(uno_game.Buffer.get(uno_game.Buffer.size() - 1).printstring());
                            continue;
                        } else {
                            flag = 1;
                            uno_game.played_card(player_id, temp_playercard, str_suit);

                        }
                    }
                }


            }

            System.out.println("THANKS FOR PLAYING");
            Thread.sleep(500);


        }
        catch(Exception e)
        {
            System.out.println("Exception caught: "+e);
        }
    }
}
public class TikTakToe implements Runnable {//TikTakToe thread
    Thread t;

    TikTakToe() {
        t = new Thread(this, "TikTakToe thread");
        System.out.println("TikTakToe game created");
    }
    class Mechanism {
        public static final int X = 1, O = -1;
        public static final int BLANK = 0;

        public int player = X;
        private int[][] grid = new int[3][3];
        public boolean isBLANK = false;

        public void marking(int x, int y) {
            if (x < 0 || x > 2 || y < 0 || y > 2) {
                System.out.println("Entered Position does not Exist!");
                return;
            }
            if (grid[x][y] != BLANK) {
                System.out.println("Entered position already occupied!");
                return;
            }
            grid[x][y] = player;
            player = -player;
        }

        public boolean Won(int player) {
            return ((grid[0][0] + grid[0][1] + grid[0][2] == player * 3) ||
                    (grid[1][0] + grid[1][1] + grid[1][2] == player * 3) ||
                    (grid[2][0] + grid[2][1] + grid[2][2] == player * 3) ||
                    (grid[0][0] + grid[1][0] + grid[2][0] == player * 3) ||
                    (grid[0][1] + grid[1][1] + grid[2][1] == player * 3) ||
                    (grid[0][2] + grid[1][2] + grid[2][2] == player * 3) ||
                    (grid[0][0] + grid[1][1] + grid[2][2] == player * 3) ||
                    (grid[2][0] + grid[1][1] + grid[0][2] == player * 3));
        }

        public void AnnounceWin() {
            if (Won(X)) {
                try{
                    FileWriter fwt=new FileWriter("C:\\Users\\Admin\\Desktop\\project_3.txt",true);
                    fwt.write( " X HAS WON TikTakToe GAME");//result of TikTakToe written to a file
                    fwt.close();
                }catch(Exception e)
                {
                    System.out.println("Exception caught");
                }
                System.out.println("\n X won...!!");
                isBLANK = false;
            } else if (Won(O)) {
                try{
                    FileWriter fwt=new FileWriter("C:\\Users\\Admin\\Desktop\\project_3.txt",true);
                    fwt.write( " O HAS WON TikTakToe GAME");//reuslt of TikTakToe written to a file
                    fwt.close();
                }catch(Exception e)
                {
                    System.out.println("Exception caught");
                }
                System.out.println("\n O won...!!");
                isBLANK = false;
            } else {
                if (!isBLANK) {
                    System.out.println("DRAW.. Try Again!");
                }

            }
        }

        public String toString() {
            StringBuilder s = new StringBuilder();
            isBLANK = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    switch (grid[i][j]) {
                        case X:
                            s.append(" X ");
                            break;
                        case O:
                            s.append(" O ");
                            break;
                        case BLANK:
                            s.append("   ");
                            isBLANK = true;
                            break;
                    }
                    if (j < 2) {
                        s.append("|");
                    }

                }
                if (i < 2) {
                    s.append("\n-----------\n");
                }
            }
            return s.toString();
        }
    }
    public void run()// run method of TikTakToe
    {
        try {
            Mechanism m = new Mechanism();
            Scanner s = new Scanner(System.in);
            int x = 0, y = 0;
            do {
                System.out.println(m.player == m.X ? "X's Turn" : "O's Turn");
                System.out.println("Enter X and Y Coordinates [0,1,2]");
                x = s.nextInt();
                y = s.nextInt();

                m.marking(x, y);
                System.out.println(m.toString());
                System.out.println("___________\n\n");
                m.AnnounceWin();

            } while (m.isBLANK);
            Thread.sleep(500);
        }
        catch(Exception e)
        {
            System.out.println("Exception caught: "+e);
        }
    }

}
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        snakeandladder sl = new snakeandladder();
        unocards uc = new unocards();
        TikTakToe ttt=new TikTakToe();
        System.out.println("Enter 1 if you want to play snake and ladder");
        System.out.println("Enter 2 if you want to play uno cards");
        System.out.println("Enter 3 if you want to play TikTakToe");
        int choice = sc.nextInt();
        if (choice == 1) {
            sl.t.start();
        } else if (choice == 2) {
            uc.t.start();
        } else if(choice==3)
        {
            ttt.t.start();
        }
        else {
            System.out.println("Invalid entry");
        }
        try {
            Thread.sleep(100000000);
        } catch (Exception e) {
            System.out.println("Exception caught: " + e);
        }finally{
            System.out.println("Thanks for running this code");
        }


    }
}

