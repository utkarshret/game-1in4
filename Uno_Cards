import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.Arrays;
public class Card {

    private String facename;                        
    private String suit;                           
    public Card(String facename,String suit)       
    {
        setFaceName(facename);                   
        setSuit(suit);
    }
    public String getFaceName(Card card)  
    {
    
        return card.facename;
    }
    public String getSuit(Card card)           
    {
        return card.suit;
    }
    public String getFacename(String facename)
    {
        return facename;
    }
    public String getSuit(String suit)
    {
        return suit;
    }
    public void setFaceName(String facename)     
    {
        this.facename=facename;
    }
    public void setSuit(String suit)            
    {
        this.suit=suit;
    }
    public String printstring()                 
    {
        return facename + " of " + suit;
    }


}

public class Deck {
    private Card[] deck;
    int current_card;
    public int cardno;
    private int top;

    public Deck()
    {
        String[] faces={"0","1","2","3","4","5","6","7","8","9","Reverse","Skip","draw 2","draw 4"};
        String[] colors={"Red","Yellow","Green","Blue"};
        cardno=0;
        deck=new Card[56];

        for(int color=0;color<4;color++)
        {
            for(int face_no=0;face_no<14;face_no++)
            {
                deck[cardno]=new Card(faces[face_no],colors[color]);
                cardno+=1;


            }
        }

        top=cardno-1;


    }




    public void display()
    {
        for(Card card: deck)
        {
            System.out.println(card.printstring());

        }
    }
    public void shuffle(int no_cards)
    {
        int no=no_cards;
        Random random=new Random();
        for(int i=0;i<no_cards;i++)
        {
            int random_index=i+random.nextInt(no-i);
            Card temp=deck[random_index];
            deck[random_index]=deck[i];
            deck[i]=temp;
        }



    }
    public Card drawCard()
    {
        if(top==0)
        {
            System.out.println("No more cards left");
            System.exit(0);
        }
        cardno=cardno-1;
        return deck[--top];
    }
  

    public boolean isEmpty()
    {
        return deck.length==0;
    }
    public void replace_deck_with(ArrayList<Card> cards_replacement)
    {
        deck=cards_replacement.toArray(new Card[cards_replacement.size()]);
        cardno=cards_replacement.size();
    }



    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        Deck thedeck=new Deck();
        thedeck.shuffle(56);
        int no_players;
        System.out.println("Enter the number of players");
        no_players=sc.nextInt();
        String[] player_names = new String[no_players+14];
        for(int i=0;i<no_players;i++)
        {
            int temp_i=i+1;
            System.out.println("Enter player "+ temp_i +"'s name");
            player_names[i]=sc.next();
        }
        Game uno_game=new Game(player_names,no_players);
        uno_game.start_game(uno_game);
        String current_turn = null;
        ArrayList<Card> temp_player_id_hand;
        while(!uno_game.game_over())
        {
            System.out.println(uno_game.current_player);
            String player_id=uno_game.get_currentplayer();
            temp_player_id_hand=uno_game.get_playerhand(player_id);
            System.out.println("Player " +player_id + " your hand is :");
            for(int i=1;i<=temp_player_id_hand.size();i++)
            {
                System.out.println(i +". " + temp_player_id_hand.get(i-1).printstring());
            }
            System.out.println("Enter 0 if you'd like to draw a card and 1 for continuing");
            if(sc.nextInt()==0)
            {
                uno_game.final_draw(player_id);
                System.out.println("The card on the top of the buffer is:");
                System.out.println(uno_game.Buffer.get(uno_game.Buffer.size()-1).printstring());

                continue;
            }
            else
            {
                int flag=0;
                while(flag==0)
                {
                    System.out.println("Enter the index of the card you'd like to play");
                    int temp1 = sc.nextInt();
                    Card temp_playercard = temp_player_id_hand.get(temp1 - 1);
                    String str_suit = temp_playercard.getSuit(temp_playercard);
                    String str_facename=temp_playercard.getFaceName(temp_playercard);
                    if(uno_game.Buffer.get(uno_game.Buffer.size()-1).getSuit(uno_game.Buffer.get(uno_game.Buffer.size()-1))!=str_suit && uno_game.Buffer.get(uno_game.Buffer.size()-1).getFaceName(uno_game.Buffer.get(uno_game.Buffer.size()-1))!=str_facename)
                    {
                        System.out.println("The card played isn't valid. Select again");
                        System.out.println(uno_game.Buffer.get(uno_game.Buffer.size()-1).printstring());
                        continue;
                    }
                    else
                    {
                        flag=1;
                        uno_game.played_card(player_id, temp_playercard, str_suit);

                    }
                }
            }





        }
        System.out.println("THANKS FOR PLAYING");







    }

}





public class Game{
    public int current_player;
    private String[] player_indices;
    private Deck deck;
    private ArrayList<ArrayList<Card>> player_hand;
    public ArrayList<Card> Buffer;
    private int players_playing;
    boolean rotation;
    String curr_facename;
    String curr_suit;
    public Game(String[] player_string,int no_players)
    {
        deck=new Deck();
        deck.shuffle(deck.cardno);
        Buffer=new ArrayList<Card>();
        current_player=0;
        rotation=false;
        players_playing=no_players;
        player_indices=player_string;
        player_hand=new ArrayList<ArrayList<Card>> ();
        for(int i=0;i<players_playing;i++)
        {
            ArrayList<Card> current_playerhand=new ArrayList<Card>();
            for(int j=0;j<7;j++)
            {
                current_playerhand.add(deck.drawCard());
            }
            player_hand.add(current_playerhand);

        }


    }
    public void start_game(Game game)
    {
        deck.shuffle(deck.cardno);
        Card card_drawn=deck.drawCard();
        Buffer.add(card_drawn);
        System.out.println("The first card drawn is:");
        System.out.println(Buffer.get(Buffer.size()-1).printstring());
        System.out.println(card_drawn.printstring());
        curr_facename = card_drawn.getFaceName(card_drawn);
        curr_suit = card_drawn.getSuit(card_drawn);
        if(card_drawn.getFaceName(card_drawn)=="draw 2")
        {
            start_game(game);

        }
        else if(card_drawn.getFaceName(card_drawn)=="draw 4")
        {
            start_game(game);
        }
        else if(card_drawn.getFaceName(card_drawn)=="reverse")
        {
            System.out.println("The rotation of the game has been reversed");
            rotation^=true;
            current_player=player_indices.length-1;

        }
        else if(card_drawn.getFaceName(card_drawn)=="skip")
        {
            System.out.println("The current player's turn has been fixed");
            if(rotation==true)
            {
                current_player=(current_player+1)%(player_indices.length);
                if(current_player==player_indices.length)
                {
                    current_player=0;
                }
            }
            else
            {
                current_player=(current_player-1)%(player_indices.length);
                if(current_player==-1)
                {
                    current_player=(player_indices.length)-1;
                }
            }

        }
       
    }
    public boolean game_over()
    {
        for(String player: player_indices)
        {
            if(emptyhand(player))
            {
                return true;
            }
        }
        return false;
    }
    public boolean emptyhand(String x)
    {
        ArrayList<Card> temp_hand=get_playerhand(x);
        if(temp_hand.size()==0)
        {
            return true;
        }
        return false;
    }
    public ArrayList<Card> get_playerhand(String y)
    {
        int indice = 0;
        for(int i=0;i<players_playing;i++)
        {
            if(player_indices[i]==y)
            {
                indice=i;
            }
        }
        return player_hand.get(indice);
    }
    public int get_playerhand_size(String z)
    {
        return get_playerhand(z).size();
    }
    public String get_currentplayer()
    {
        return player_indices[current_player];
    }
    public String get_previousplayer()
    {
        int prev_idx=current_player-1;
        if(prev_idx==-1)
        {
            prev_idx=player_indices.length-1;

        }
        return player_indices[prev_idx];
    }
    public Card get_playercard(String player_id,int choice)
    {
        ArrayList<Card> temp= get_playerhand(player_id);
        return temp.get(choice);
    }
    public boolean is_valid_move(Card card)
    {
        Card temp_card1;
        temp_card1=Buffer.get(Buffer.size()-1);
        curr_suit= temp_card1.getSuit(temp_card1);
        curr_facename= temp_card1.getFaceName(temp_card1);
        return card.getFaceName(card)==curr_facename || card.getSuit(card)==curr_suit;

    }
    public boolean is_player_turn(String curr_player_id)
    {
        return player_indices[current_player]==curr_player_id;
    }

    public void final_draw(String id_player)
    {
        if(is_player_turn(id_player))
        {
            if(deck.isEmpty())
            {
                deck.replace_deck_with(Buffer);
                deck.shuffle(deck.cardno);
                Buffer.add(deck.drawCard());


            }
            get_playerhand(id_player).add(deck.drawCard());
            if(rotation==false)
            {
                current_player=(current_player+1) % (player_indices.length);
            }
            else if(rotation==true)
            {
                current_player=(current_player-1) % (player_indices.length);
                if(current_player==-1)
                {
                    current_player=(player_indices.length)-1;
                }
            }
        }


    }
    public void played_card(String identity,Card card,String suit_card)
    {
        ArrayList<Card> curr_identity_hand=get_playerhand(identity);
        if(is_player_turn(identity))
        {
            curr_identity_hand.remove(card);
            if(emptyhand(identity))
            {
                System.out.println(identity + "HAS WON");

            }
            curr_facename=card.getFaceName(card);
            curr_suit=card.getSuit(card);
            Buffer.add(card);
            System.out.println("The card on the top of the buffer is:");
            System.out.println(card.printstring());

        }
        if(rotation==false)
        {
            current_player=(current_player+1) % (player_indices.length);
            if(current_player==players_playing)
            {
                current_player=0;
            }
        }
        else
        {
            current_player=(current_player-1) % (player_indices.length);
            if(current_player==-1)
            {
                current_player=(player_indices.length)-1;
            }
        }
        if(card.getFaceName(card)=="draw 2")
        {
            identity=player_indices[current_player];
            curr_identity_hand=get_playerhand(identity);
            curr_identity_hand.add(deck.drawCard());
            curr_identity_hand.add(deck.drawCard());
            System.out.println(identity +" just drew 2 cards ");
        }
        if(card.getFaceName(card)=="draw 4")
        {
            identity=player_indices[current_player];
            curr_identity_hand=get_playerhand(identity);
            curr_identity_hand.add(deck.drawCard());
            curr_identity_hand.add(deck.drawCard());
            curr_identity_hand.add(deck.drawCard());
            curr_identity_hand.add(deck.drawCard());
            System.out.println(identity +" just drew 4 cards ");

        }
        if(card.getFaceName(card)=="Skip")
        {
            identity=player_indices[current_player];
            System.out.println(identity+" was skipped ");
            if(rotation==false)
            {
                current_player=(current_player+1)%player_indices.length;
                if(current_player==player_indices.length)
                {
                    current_player=0;
                }
            }
            else
            {
                current_player=(current_player-1)%player_indices.length;
                if(current_player==-1)
                {
                    current_player=player_indices.length-1;
                }
            }
        }
        if(card.getFaceName(card)=="Reverse")
        {
            System.out.println("The game rotation has been reversed");
            rotation^=true;
            if(rotation==true)
            {
                current_player=(current_player-2)%player_indices.length;
                if(current_player==-1)
                {
                    current_player=player_indices.length-1;
                }
                if(current_player==-2)
                {
                    current_player=player_indices.length-2;
                }
            }

        }
        /*if(rotation==false && current_player==players_playing-1)
        {
            current_player=0;
        }
        else if(rotation==true && current_player==0)
        {
            current_player=players_playing-1;
        }*/



    }

}





